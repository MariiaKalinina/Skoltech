{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "497e4167"
      },
      "source": [
        "# Problem set 2 (99 pts)\n",
        "\n",
        "## Important information\n",
        "\n",
        "1. We provide signatures of the functions that you have to implement. Make sure you follow the signatures defined, otherwise your coding solutions will not be graded.\n",
        "\n",
        "2. Please submit the single Jupyter Notebook file, where only Python and Markdown/$\\LaTeX$\n",
        " are used. Any hand-written solutions inserted by photos or in any other way are prohibitive and will not be graded. If you will have any questions about using Markdown, ask them!\n",
        "\n",
        "3. The works will be checked for plagiarism. The score will be divided by the number of similar works."
      ],
      "id": "497e4167"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f3e8a6cc"
      },
      "source": [
        "# Problem 1 (44 pts)\n",
        "\n",
        "Commonly enough the matrices arising in discretisations of particular problems are not just sparse, but also possess the *banded* property i.e. a general element of $A$ be $a_{ij}$, we say that it has an *upper bandwith* of $u$ and a *lower bandwith* of $l$ iff it may only nonzero between $l$-th and $u$-th main diagonals (in other words, $a_{ij}$ may only be nonzero when $i\\le j+l$ and $j\\le i+ u$).\n",
        "In particular, any upper triangular matrix of size $n\\times n$ has a lower bandwith of 1 and an upper bandwith of $n$.\n",
        "The goal of this task is to endow you with some understanding of this important matrix class. Keep in mind that vectors are column.\n",
        "\n",
        "1) (1 pts) Assume you are given a dyadic matrix $xy^T$. Suppose that only $a$ leading components of $x$ and $b$ leading components of $y$ are nonzero. What are the bandwiths of this matrix?\n",
        "\n",
        "\n",
        "2) (3 pts) Assume you are given a banded matrix $A\\in\\mathbb{R}^{n\\times n}$ with bandwiths $l$ and $u$. Examine the bandwidths of its $L$ and $U$ factors in LU decomposition, assuming its existence. Assume that the diagonal is nonzero for simplicity of the proof.\n",
        "\n",
        "3) (3 pts) Assume we also perform pivoting in computing PLU decomposition, so that $A\\ne LU$, but rather $PA = LU$. Examine the upper bandwidth of $U$.\n",
        "\n",
        "\n",
        "4) (7 pts) Based on the intuition gained so far, propose and implement an LU algorithm for banded matrices specifically. Estimate the leading term in the complexity analysis. Pivoting is not needed.\n",
        "\n",
        "\n",
        "5) (5 pts) Specify the above algorithm to tridiagonal matrices. Implement it and estimate complexity.\n",
        "\n",
        "\n",
        "6) (10 pts) Since we are dealing with direct inversions, we would also like to know how the banded matrices invert. In particular, we would like to know if we can say something about inverses' structure. Show that the inverse of a banded matrix is a matrix with low-rank off-diagonal blocks and estimate the ranks thereof. Assume the matrix diagonal blocks nonsingular.\n",
        "\n",
        "7) (10 pts) Finally, proof the following important fact, due to Strang: if both a matrix and its inverse are banded, then the matrix is a product of block diagonal factors; each factor is composed of $2\\times2$ and $1\\times1$ blocks, and the total number thereof is not dependent directly on the matrix dimension. Try to make it as convincing as you can.\n",
        "\n",
        "8) (5 pts) Consider the inverse matrix of a banded matrix with the strcuture from task 7); consider also the transpose thereof. Show that they share bandwidths."
      ],
      "id": "f3e8a6cc"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vIVSHyYtoCME"
      },
      "source": [
        "#**Solution 1**#\n",
        "##**1.1**##\n",
        "The multiplication of a dyadic matrix $xy^T$, where $xy^T$ $\\in \\mathbb{R}^{p\\times n}$can be presented as:\n",
        "\\\n",
        "\\begin{bmatrix}\n",
        "    x_1 y_1 & x_1 y_2 & \\dots & x_1 y_n \\\\\n",
        "    x_2 y_1 & x_2 y_2 & \\dots & x_2 y_n \\\\\n",
        "    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "    x_p y_1 & x_p y_2 & \\dots & x_p y_n \\\\\n",
        "\\end{bmatrix}\n",
        "\n",
        "Assume that multiplited matrix possess the *banded* property and its leading components $a$ and $b$ are nonzero, then the matrix $xy^T_{ij}$ elements is not zero iff ${i}\\le{a}$ and ${j}\\le{b}$. In this case the matrix has the form as\n",
        "\\\n",
        "\\begin{bmatrix}\n",
        "    x_1 y_1 & x_1 y_2 & \\dots & 0 \\\\\n",
        "    x_2 y_1 & x_2 y_2 & \\dots & 0 \\\\\n",
        "    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "    0 & 0 & \\dots & 0 \\\\\n",
        "\\end{bmatrix}\n",
        "\n",
        "where only the the upper left block of size $a\\ \\times\\ b$ is non-zero.\n",
        "Thus, the bandwiths of the matrix is $a-1$ and upper is $b-1$.\n",
        "\n",
        "##**1.2**##\n",
        "In case of using Gaussian elemination to provide LU factarization a banded matrix $A\\in\\mathbb{R}^{n\\times n}$ has a form, where the diaginal elements $(d)$ is nonzero:\n",
        "\\\n",
        "\\begin{bmatrix}\n",
        "    \\begin{array}{c|c}\n",
        "        d &  w^{T} \\\\\n",
        "        \\hline\n",
        "        b & A'\n",
        "    \\end{array}\n",
        "\\end{bmatrix}\n",
        "\n",
        "Let consider the $L$ and $U$ factors after applying Gaussian elemination:\n",
        "\n",
        "$L$ factor\n",
        "\\\n",
        "\\begin{bmatrix}\n",
        "    \\begin{array}{c|c}\n",
        "        1 &  0 \\\\\n",
        "        \\hline\n",
        "        b' & I_{n-1}\n",
        "    \\end{array}\n",
        "\\end{bmatrix}\n",
        "where $b'$ is a result of devision of $\\frac{1}{a}$.\n",
        "\n",
        "Since every nonzero element is preserved at each stage of the Gaussian elemination process for the $L$ factor, the lower bandwiths for the $L$ factor in the LU decomposition are $l$ and the upper bandwiths are 0 since every element that lies over the main diagonal is zero.\n",
        "\n",
        "$U$ factor\n",
        "\n",
        "\\begin{bmatrix}\n",
        "    \\begin{array}{c|c}\n",
        "        d & w^{T} \\\\\n",
        "        \\hline\n",
        "        0 & A'-b'w^{T}\n",
        "    \\end{array}\n",
        "\\end{bmatrix}\n",
        "\n",
        "As matrix $A$ has upper bandwiths $u$ and for $U$ factor it the same; the lower bandwiths is 0 since all elements lying below the main diagonal are zero.\n",
        "\n",
        "##**1.3**##\n",
        "Let assume that $P$ is a matrix which determines the arrangement of the rows of $A$ in the product $PA$ and we will get the entry at position $(i,j)$ is obtained from the dot product of the ${i}$ row of $P$ and the ${j}$ column of $A$. Let $p$ rows determine the entry $(i,j)$ of the dot product $PA$. The element with $(i,j)$ is zero since it is outside of the lower bandwidth $l$ if we shift the row $p_i$ out of the $j$ + the lower bandwidth ($l$).Any row shift that is more than $j$ + the lower bandwidth may result in a singular matrix, indicating that the matrix is not invertible. Let us assume that $m$ is the maximum position after shifting of which will cause the matrix to become singular. Thus, maximum position the row can be shift is $m + l$. Therefore, the upper bandwidth of $PA$ extends to $u + l$, and also in case of the perform of pivoting in $PLU$ decomposition for $PA = LU$ the upper bandwidth of $U$ will be extend to $u + l$ as well.\n"
      ],
      "id": "vIVSHyYtoCME"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0vMfwgn3ecE6"
      },
      "source": [
        "##**1.4**##"
      ],
      "id": "0vMfwgn3ecE6"
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "HRsdOEK0evip"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ],
      "id": "HRsdOEK0evip"
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "VeHDSkbY_KGr"
      },
      "outputs": [],
      "source": [
        "def banded_matrix(size, upper, lower, a, b):\n",
        "\n",
        "    \"\"\"\n",
        "    n - matrix of size n x n\n",
        "    upper - upper half-bandwidth\n",
        "    lower - lower half-bandwidth\n",
        "    a, b - random values between a and b\n",
        "    \"\"\"\n",
        "    matrix = np.random.randint(a, b, size=(size, size))\n",
        "\n",
        "    for i in range(size):\n",
        "        for j in range(size):\n",
        "            if i - j > upper or j - i > lower:\n",
        "                matrix[i, j] = 0\n",
        "    print(\"Original Matrix:\")\n",
        "    print(matrix)\n",
        "    return matrix"
      ],
      "id": "VeHDSkbY_KGr"
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "E7KEMhYMfEPI"
      },
      "outputs": [],
      "source": [
        "def lu_decomposition(matrix, upper, lower):\n",
        "\n",
        "    n = matrix.shape[0]\n",
        "    L = np.eye(n)\n",
        "    U = np.zeros((n, n))\n",
        "\n",
        "    for i in range(n):\n",
        "        # Upper triangular matrix (U)\n",
        "        for j in range(i, min(i + upper + 1, n)):\n",
        "            U[i, j] = matrix[i, j] - np.dot(L[i, :i], U[:i, j])\n",
        "\n",
        "        # Lower triangular matrix (L)\n",
        "        for j in range(i + 1, min(i + lower + 1, n)):\n",
        "            L[j, i] = (matrix[j, i] - np.dot(L[j, :i], U[:i, i])) / U[i, i]\n",
        "\n",
        "    print(\"\\nL matrix:\")\n",
        "    print(L)\n",
        "    print(\"\\nU matrix:\")\n",
        "    print(U)\n",
        "\n",
        "    return L, U"
      ],
      "id": "E7KEMhYMfEPI"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ffQ_-DqGfGEm",
        "outputId": "ddd01db2-8798-4f02-ba8b-b50d8d68622c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Matrix:\n",
            "[[ 7 20 11  0  0]\n",
            " [ 5 13  7  5  0]\n",
            " [21  9 15 16 11]\n",
            " [ 0 15  6  2 12]\n",
            " [ 0  0 20 19 16]]\n",
            "\n",
            "L matrix:\n",
            "[[  1.           0.           0.           0.           0.        ]\n",
            " [  0.71428571   1.           0.           0.           0.        ]\n",
            " [  3.          39.66666667   1.           0.           0.        ]\n",
            " [  0.         -11.66666667  -0.25         1.           0.        ]\n",
            " [  0.           0.           1.25        16.74011299   1.        ]]\n",
            "\n",
            "U matrix:\n",
            "[[   7.           20.           11.            0.            0.        ]\n",
            " [   0.           -1.28571429   -0.85714286    5.            0.        ]\n",
            " [   0.            0.           16.         -182.33333333   11.        ]\n",
            " [   0.            0.            0.           14.75         14.75      ]\n",
            " [   0.            0.            0.            0.         -244.66666667]]\n"
          ]
        }
      ],
      "source": [
        "a, b = 1, 22\n",
        "size = 5\n",
        "upper, lower = 2, 2\n",
        "\n",
        "origin_matrix = banded_matrix(size, upper, lower, a, b)\n",
        "L, U = lu_decomposition(origin_matrix, upper, lower)"
      ],
      "id": "ffQ_-DqGfGEm"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U4QmL-g7ljsv"
      },
      "source": [
        "The complexity of LU decomposition for banded matrices can be estimated as $2n(u+1)(l+1)$, where $n$ is the size of the matrix, $u$ is the upper bandwidth, and $l$ is the lower bandwidth. The algorithm performs at most $n$ steps, bounded by the minimum between the matrix size and the given bandwidth. In each of these $n$ steps, the computation involves at most $(u+1)(l+1)$ multiplications and the same number of additions. Therefore, the total complexity can is $2n(u+1)(l+1)$. This demonstarete that the complexity depends on the product of the matrix size, the bandwidth, and the number of operations at each step."
      ],
      "id": "U4QmL-g7ljsv"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "stsf0Xr_jPb-"
      },
      "source": [
        "##**1.5**##\n"
      ],
      "id": "stsf0Xr_jPb-"
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "ZpMSvP31j59Y"
      },
      "outputs": [],
      "source": [
        "def banded_matrix_tridiagonal(size, hb, a, b):\n",
        "\n",
        "    \"\"\"\n",
        "    n - matrix of size n x n\n",
        "    hb - half-bandwidth\n",
        "    a, b - random values between a and b\n",
        "    \"\"\"\n",
        "    matrix = np.random.randint(a, b, size=(size, size))\n",
        "\n",
        "    for i in range(size):\n",
        "        for j in range(size):\n",
        "            if i - j > hb:\n",
        "                matrix[i, j] = 0\n",
        "    print(\"Tridiagonal  Matrix:\")\n",
        "    print(matrix)\n",
        "    return matrix"
      ],
      "id": "ZpMSvP31j59Y"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "v6a1_LAukRRe"
      },
      "outputs": [],
      "source": [
        "def lu_decomposition_tridiagonal(matrix, hb):\n",
        "\n",
        "    n = matrix.shape[0]\n",
        "    L = np.eye(n)\n",
        "    U = np.zeros((n, n))\n",
        "\n",
        "    for i in range(n):\n",
        "        # Upper triangular matrix (U)\n",
        "        for j in range(i, min(i + hb + 1, n)):\n",
        "            U[i, j] = matrix[i, j] - np.dot(L[i, :i], U[:i, j])\n",
        "\n",
        "        # Lower triangular matrix (L)\n",
        "        for j in range(i + 1, min(i + lower + 1, n)):\n",
        "            L[j, i] = (matrix[j, i] - np.dot(L[j, :i], U[:i, i])) / U[i, i]\n",
        "\n",
        "    print(\"\\nL matrix:\")\n",
        "    print(L)\n",
        "    print(\"\\nU matrix:\")\n",
        "    print(U)\n",
        "\n",
        "    return L, U"
      ],
      "id": "v6a1_LAukRRe"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58ZUrNAMjl3G",
        "outputId": "78c6074a-1d13-43b3-c8e2-a37595417db1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tridiagonal  Matrix:\n",
            "[[16  3  4 10  3]\n",
            " [12 20 21 19  1]\n",
            " [ 0 19  8  4  3]\n",
            " [ 0  0 11  1  7]\n",
            " [ 0  0  0  8 12]]\n",
            "\n",
            "L matrix:\n",
            "[[ 1.          0.          0.          0.          0.        ]\n",
            " [ 0.75        1.          0.          0.          0.        ]\n",
            " [ 0.          1.07042254  1.          0.          0.        ]\n",
            " [ 0.          0.         -0.75972763  1.          0.        ]\n",
            " [ 0.          0.         -0.          1.98073218  1.        ]]\n",
            "\n",
            "U matrix:\n",
            "[[ 16.           3.           0.           0.           0.        ]\n",
            " [  0.          17.75        21.           0.           0.        ]\n",
            " [  0.           0.         -14.47887324   4.           0.        ]\n",
            " [  0.           0.           0.           4.03891051   7.        ]\n",
            " [  0.           0.           0.           0.          -1.86512524]]\n"
          ]
        }
      ],
      "source": [
        "a, b = 1, 22\n",
        "size = 5\n",
        "hb = 1\n",
        "\n",
        "origin_matrix = banded_matrix_tridiagonal(size, hb, a, b)\n",
        "L, U = lu_decomposition_tridiagonal(origin_matrix, hb)"
      ],
      "id": "58ZUrNAMjl3G"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zy70CaS1s1sW"
      },
      "source": [
        "\n",
        "To estimate the complexity of LU decomposition for tridiagonal matrices, let use the complexity derived from **1.5**: $2n(l+1)(u+1)$, where $n$ is the size of the matrix, $l$ is the lower bandwidth, and $u$ is the upper bandwidth. Since tridiagonal matrices have $l=u=1$, the complexity can be approximated as $2n(1+1)(1+1) = 8n$. Then, the complexity of LU decomposition for tridiagonal matrices is $O(n)$."
      ],
      "id": "zy70CaS1s1sW"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4RqhEwyozJsb"
      },
      "source": [
        "##**1.6**##\n",
        "\n",
        "Let consider the case when a banded matrix $X$ can be represented as blocks:\n",
        "\\\n",
        " \\begin{bmatrix}\n",
        "    X_{11} & X_{12} \\\\\n",
        "    X_{21} & X_{22}\n",
        "\\end{bmatrix}\n",
        "\n",
        "Then assume the matrix $X$ is inverteble then its inverse matrix is $Y = X^{-1}$.\n",
        "If we find the product of $X$ and $Y$ then we get such matrix:\n",
        "\\begin{bmatrix}\n",
        "    X_{11}Y_{11} + X_{12}Y_{21} & X_{11}Y_{12} + X_{12}Y_{22} \\\\\n",
        "    X_{21}Y_{11} + X_{22}Y_{21} & X_{21}Y_{12} + X_{22}Y_{22}\n",
        "\\end{bmatrix}\n",
        "\n",
        "\n",
        "Consider this multiplication we can express each block element of the inverse matix as $Y_{11}=X_{11}^{-1}(I- X_{12}Y_{21})$, $Y_{22}=X_{22}^{-1}(I- Y_{21}Y_{12})$, $Y_{12} = - X_{11}^{-1}X_{12}Y_{22}$, $Y_{21} = - X_{22}^{-1}X_{21}Y_{11}$.\n",
        "\n",
        "To estimate the ranks of the block we can consider the matrix rank inequality:\n",
        "\n",
        "$$rank(AB)\\leq\\min(rank(A);rank(B))$$\n",
        "\n",
        "\n",
        "The rank of a block matrix is bounded by the minimum rank of the matrix required to obtain it. The rank of the inverse matrix block is less than or equal to the rank of one of the blocks of the original matrix, depending on the specific inverse matrix block being considered."
      ],
      "id": "4RqhEwyozJsb"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "DRnvKkrAtL-Y"
      },
      "outputs": [],
      "source": [],
      "id": "DRnvKkrAtL-Y"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "37600aad"
      },
      "source": [
        "# Problem 2. Stability of linear least squares (25 pts)\n",
        "\n",
        "In this task you are supposed to explore the concept of the stability of the linear least squares problem.\n",
        "\n",
        "So you are given a matrix $A \\in \\mathbf{R}^{n \\times m}, n > m$, the right-hand side $b \\in \\mathbf{R}^{n}$. And you need to find the solution $x \\in \\mathbf{R}^{m}$ that minimizes the residual:\n",
        "\n",
        "$$\n",
        "\\Vert A x - b \\Vert_2 \\rightarrow \\min_x.\n",
        "$$\n",
        "\n",
        "### Task 1. Theory\n",
        "For all tasks here you can use spectral norm for the computation of condition number.\n",
        "\n",
        "1. (5 pts) Condition number of a matrix affects the stability of the solution. Recall from the lecture that using a normal equation $ A^* A x = A^* b $ to solve linear least squares problem is not a good idea.\n",
        "Prove that $\\mathrm{cond}_2(A^* A) = \\mathrm{cond}_2(A)^2$.\n",
        "\n",
        "2. (5 pts) Derive the condition number in 2-norm for\n",
        "  \n",
        "   a) unitary matrix,\n",
        "   \n",
        "   b) normal matrix,\n",
        "\n",
        "   c) diagonal matrix.\n",
        "\n",
        "### Task 2. Practice (15 pts)\n",
        "\n",
        "In this task you need to compare the relative errors of solution produced by different approaches for solving linear least squares on ill-conditioned matrices.\n",
        "\n",
        "1. Come up with the way to construct a random $n \\times m$ matrix with given condition number. Implement it in `construct_random_matrix`.\n",
        "\n",
        "2. You need to solve linear least squares problem using four ways:\n",
        "   \n",
        "   a) with normal equation;\n",
        "   \n",
        "   b) using QR decomposition;\n",
        "   \n",
        "   c) using pseudoinverse (compute it yourself using SVD);\n",
        "   \n",
        "   d) using bigger system of equations\n",
        "   \n",
        "   $$ \\begin{pmatrix} 0 & A^* \\\\ A & -I \\end{pmatrix} \\begin{pmatrix} x \\\\ r \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ b \\end{pmatrix}, $$\n",
        "   \n",
        "    where $r = Ax - b$.\n",
        "\n",
        "3. With the growth of condition number show the growth of the relative error $\\frac{\\Vert \\hat{x} - x \\Vert}{\\Vert x \\Vert}$ between the initial solution $x$ and the solution $\\hat{x}$ of the perturbed system $Ax = b + \\Delta b$. Show that for the normal equation the dependence is quadratic w.r.t condition number, while for the other methods it is linear. Plot the resulting dependence (error vs condition number) and comment on results. Ensure that your plots are interpretable.\n",
        "\n",
        "4. In general, the setup of your experiment should be the following:\n",
        " - Generate a random matrix $A$ and a vector $x_\\text{true}$.\n",
        " - Compute the correct right-hand side $b$.\n",
        " - Solve the resulting system $Ax = b$ to get $x$.\n",
        " - Perturb the system $Ax = b + \\Delta b$ and get new solution $\\hat{x}$. The perturbation $\\frac{\\Vert \\Delta b \\Vert}{\\Vert b \\Vert}$ should be small.\n",
        "\n",
        "You are free to use `numpy` or `jax`."
      ],
      "id": "37600aad"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "POgMIIxhWXPV"
      },
      "source": [
        "#**2.1.1**#\n",
        "\n",
        "We know that $cond_2(A^*A) = \\|A^*A\\|_2*\\|A^{-1}A^{*-1}\\|_2$. Also we know that $\\left\\|(A^* A)^{-1}\\right\\|_2 = \\frac{1}{\\sigma_{\\min}(A^* A)}$,\n",
        "where $\\sigma_{\\min}(A^* A)$ is the smallest singular value of $A^* A$. Also, $\\left\\|A^* A\\right\\|_2 = \\sigma_{\\max}(A^* A)$, where $\\sigma_{\\max}(A^* A)$ is the largest singular value of $A^* A$.\n",
        "\n",
        "Consider (SVD) of $A$: $A = U \\Sigma V^*$, where $U$ and $V$ are unitary matrices, and $\\Sigma$ is a diagonal matrix containing singular values on the diagonal. $A^* A = V \\Sigma^* U^* U \\Sigma V^* = V \\Sigma^* \\Sigma V^*$.\n",
        "\n",
        "The singular values of $A^* A$ are the squared singular values of matrix $A$; $\\|A\\|_2 = \\sqrt{\\lambda_{\\max}(A^*A)}$.\n",
        "We can write $\n",
        "\\sigma_{\\max}(A^* A) = \\sigma_{\\max}^2(A) \\quad \\text{and} \\quad \\sigma_{\\min}(A^* A) = \\sigma_{\\min}^2(A)$.\n",
        "\n",
        "Finally we obtain$\n",
        "\\mathrm{cond}_2(A^* A) = \\frac{\\sigma_{\\max}^2(A)}{\\sigma_{\\min}^2(A)} = \\mathrm{cond}_2(A)^2=\\left\\|A\\right\\|_2^{2} \\cdot \\left\\|(A)^{-1}\\right\\|_2^{2}$."
      ],
      "id": "POgMIIxhWXPV"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3ANifIZJa0pL"
      },
      "source": [
        "#**2.1.2**#\n",
        "a) unitary matrix\n",
        "\\\n",
        "$cond_2(U) = \\|U\\|_2\\|U^{-1}\\|_2$,\n",
        "\n",
        "$||U||_2 =  \\sqrt{\\lambda_{\\max}(U^*U)} = σ_{max}(U) = 1$,\n",
        "\n",
        "$||U^{-1}||_2 = ||U^{*}||_2 = σ_{max}(U^*) =σ_{max}(I) = 1$\n",
        "\n",
        "The condition number in 2-norm for unitary matrix $U$ is $cond_2U  = σ_{max}(I)=1$\n",
        "\n",
        "\\\n",
        "b) normal matrix\n",
        "\\\n",
        "Let assume that $A$ is a normal matrix. Represent $A$ as $A=UTU^*$ using Schur decomposition. $U$ - unitary mtrix, $T$ is a diagonal matrix with non-negative eigenvalues on the diagonal.\n",
        "\n",
        "Let consider,\n",
        "$cond_2A=\\|A\\|_2*\\|A^{-1}\\|_2=\\sqrt{λ_{max}(A^*A)}\\sqrt{λ_{max}((A^*)^{-1}A^{-1})}=\\sqrt{λ_{max}((UTU^*)^*UTU^*)}\\sqrt{λ_{max}(((UTU^*)^*)^{-1}(UTU^*)^{-1})}=\\sqrt{λ_{max}(AA)}*\\sqrt{λ_{max}(A^{-1}A^{-1})}=|λ_{max}(A)|̇|λ_{max}(A^{-1})|$\n",
        "\n",
        "The condition number in 2-norm for normal matrix $A$ is $cond_2A  = |λ_{max}(A)|̇|λ_{max}(A^{-1})|$\n",
        "\n",
        "\\\n",
        "c) diagonal matrix\n",
        "\\\n",
        "As $A^{-1}$ is matrix with inverse eigenvalues on diagonal then $|λ_{max}(A^{-1})|=|λ_{min}(A)|$. The condition number in 2-norm for the diagonal matrix $A$ is $cond_2A  = |λ_{max}(A)|̇|λ_{max}(A^{-1})| = |λ_{max}(A)|\\|λ_{min}(A)|$"
      ],
      "id": "3ANifIZJa0pL"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BwO6FkYDjOgp"
      },
      "source": [],
      "id": "BwO6FkYDjOgp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nFITbuazmc9c"
      },
      "source": [
        "##**2.2.1**##"
      ],
      "id": "nFITbuazmc9c"
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tj0b0eBXEfGB",
        "outputId": "080f2dfc-2bd7-45da-873f-34c5c0b52ee3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Populating the interactive namespace from numpy and matplotlib\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/IPython/core/magics/pylab.py:159: UserWarning: pylab import has clobbered these variables: ['size']\n",
            "`%matplotlib` prevents importing * from pylab and numpy\n",
            "  warn(\"pylab import has clobbered these variables: %s\"  % clobbered +\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%pylab inline"
      ],
      "id": "Tj0b0eBXEfGB"
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "9vQnjgy8Ek6s"
      },
      "outputs": [],
      "source": [
        "def construct_random_matrix(n: int, m: int, cond_number: float):\n",
        "    \"\"\"\n",
        "    Constructs random nxm matrix with a given condition matrix.\n",
        "\n",
        "    Args:\n",
        "        n, m: matrix dimensions\n",
        "        cond_number: the desired condition numebr\n",
        "\n",
        "    Returns: nxm matrix with condition number cond_number\n",
        "    \"\"\"\n",
        "\n",
        "    matrix = random.random(size=(n, m))\n",
        "    U, Sigma, V = linalg.svd(matrix, full_matrices=False)\n",
        "    s_max = max(Sigma)\n",
        "    s_min = s_max / cond_number\n",
        "    Sigma = sort(s_min + (s_max - s_min) * np.random.rand(min(m, n)))[::-1]\n",
        "    Sigma[0] = s_max\n",
        "    Sigma[min(m, n) - 1] = s_min\n",
        "    return dot(U * Sigma, V)\n",
        "    pass\n",
        "    return A"
      ],
      "id": "9vQnjgy8Ek6s"
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "5AyBTEIpFCbj"
      },
      "outputs": [],
      "source": [
        "n = 100\n",
        "m = 40\n",
        "cond_number = np.random.random() * 1000\n",
        "\n",
        "assert np.allclose(np.linalg.cond(construct_random_matrix(n, m, cond_number)), cond_number)"
      ],
      "id": "5AyBTEIpFCbj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M6PYLcwgGbIl"
      },
      "source": [
        "##**2.2.2**##"
      ],
      "id": "M6PYLcwgGbIl"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "i7yRgQjtFLiX"
      },
      "outputs": [],
      "source": [
        "# a) with normal equation\n",
        "def least_squares_normal_equation(A, b):\n",
        "    B = A.copy()\n",
        "    return linalg.solve(A.T @ A, A.T @ b)\n",
        "\n",
        "# b) using QR decomposition\n",
        "def least_squares_qr(A, b):\n",
        "    B = A.copy()\n",
        "    Q, R = linalg.qr(B)\n",
        "    return linalg.solve(R, Q.T @ b)\n",
        "\n",
        "# c) using pseudoinverse\n",
        "def least_squares_pseudoinverse(A, b):\n",
        "    B = A.copy()\n",
        "    C = linalg.pinv(B,rcond=1e-15)\n",
        "    U, Sigma, Vt = linalg.svd(C, full_matrices=False)\n",
        "    A_plus = dot(np.dot(U, np.diag(Sigma)), Vt)\n",
        "    x = dot(A_plus, b)\n",
        "    return x\n",
        "\n",
        "# d) using bigger system of equations\n",
        "def solve_ext_sys(A, b):\n",
        "  B = A.copy()\n",
        "  n, m = B.shape\n",
        "  larger_system_matrix = block([[np.zeros((m, m)), B.T], [B, -np.eye(n)]])\n",
        "  larger_system_rhs = concatenate([np.zeros(m), b])\n",
        "  x = linalg.solve(larger_system_matrix, larger_system_rhs)\n",
        "  return x[:m]"
      ],
      "id": "i7yRgQjtFLiX"
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "a4sB9mmamvfr"
      },
      "outputs": [],
      "source": [
        "def perturbation(b):\n",
        "    n = len(b)\n",
        "    return linalg.qr(np.random.random((n, n)))[0] @ (b / 1e12)"
      ],
      "id": "a4sB9mmamvfr"
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "z_8_wovlmvig"
      },
      "outputs": [],
      "source": [
        "def relative_error(original, perturbed):\n",
        "    return linalg.norm(perturbed - original,ord =1 ) / linalg.norm(original, ord =1)"
      ],
      "id": "z_8_wovlmvig"
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "CuJWvKsEmx0U",
        "outputId": "5c560f47-4bc1-45e9-e34f-cf37ae111560"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "A = construct_random_matrix(n,m, cond_number)\n",
        "x_true = random.rand(m)\n",
        "b = A @ x_true\n",
        "\n",
        "methods_labels = ['Normal Equation', 'QR', 'Pseudoinverse', 'Bigger system of equations']\n",
        "methods_of_sol = [least_squares_normal_equation, least_squares_qr, least_squares_pseudoinverse, solve_ext_sys]\n",
        "for k in range(len(methods_of_sol)):\n",
        "    figure(figsize=(6,4))\n",
        "    errors = array([])\n",
        "    condition_numbers = array([])\n",
        "\n",
        "    for i in range(1, 1000000, 100):\n",
        "        cond_number = i\n",
        "        condition_numbers = np.append(condition_numbers, ([cond_number]))\n",
        "        A = construct_random_matrix(n, m, cond_number)\n",
        "        b = A @ x_true\n",
        "        delta_b = perturbation(b)\n",
        "        x = methods_of_sol[k](A, b)\n",
        "        b_perturbed = b + delta_b\n",
        "        x_perturbed = methods_of_sol[k](A, b_perturbed)\n",
        "        error = np.linalg.norm(x_perturbed - x) / np.linalg.norm(x)\n",
        "        errors = np.append(errors, ([error]))\n",
        "\n",
        "    plot(condition_numbers, errors, label=methods_labels[k])\n",
        "    xlabel('Condition numbers')\n",
        "    ylabel('Error')\n",
        "    legend()\n"
      ],
      "id": "CuJWvKsEmx0U"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6vgOFJbbGqLD"
      },
      "source": [
        "##**2.3**##"
      ],
      "id": "6vgOFJbbGqLD"
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Azt3BfCOGrmd",
        "outputId": "11e3978a-8312-4952-96d4-dcf3bb028801"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Relative Error: 1.3066601671189515e-11\n"
          ]
        }
      ],
      "source": [
        "A = random.randn(n, m)\n",
        "x_true = random.randn(m)\n",
        "\n",
        "b = A @ x_true\n",
        "x = linalg.pinv(A) @ b\n",
        "\n",
        "delta_b = 1e-10 * np.random.randn(n)\n",
        "b_perturbed = b + delta_b\n",
        "\n",
        "x_per = linalg.pinv(A) @ b_perturbed\n",
        "error = relative_error(x, x_per)\n",
        "\n",
        "print(\"Relative Error:\", relative_error(x, x_per))"
      ],
      "id": "Azt3BfCOGrmd"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_7BeeMBGGr7z"
      },
      "source": [
        "##**2.4**##"
      ],
      "id": "_7BeeMBGGr7z"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9f71aa55"
      },
      "source": [
        "# Problem 3 (30 pts)\n",
        "\n",
        "A generalisation of the eigenvalue problem is the generalised eigenvalue problem; if an eigenpair satisfies\n",
        "$$ Av = \\lambda v,$$\n",
        "then a generalised eigenvalue for a pair $(A,B)$ of matrices makes the matrix\n",
        "$$A-\\lambda B$$\n",
        "degenerate.\n",
        "The generalised eigenvector satisfies $Av = \\lambda Bv$. In this task we consider matrices $A,B$ are of size  $n\\times n$.\n",
        "\n",
        "## Task 1 (4 pts)\n",
        "\n",
        "How many generalised eigenvalues are there for each of the following matrix pairs? Find all, if you can:\n",
        "\n",
        "  1. $$ A = \\begin{bmatrix} 1 & 2 \\\\ 0 & 3 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 1 & 0 \\\\ 0& 1 \\end{bmatrix} $$\n",
        "\n",
        "  2. $$ A = \\begin{bmatrix} 1 & 2 \\\\ 0 & 3 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 1 & 0 \\\\ 0& 0 \\end{bmatrix} $$\n",
        "  \n",
        "  3. $$ A = \\begin{bmatrix} 1 & 2 \\\\ 0 & 3 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 0 & 1 \\\\ 0& 0 \\end{bmatrix} $$\n",
        "  \n",
        "  4. $$ A = \\begin{bmatrix} 1 & 2 \\\\ 0 & 0 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 1 & 0 \\\\ 0& 0 \\end{bmatrix} $$\n",
        "\n",
        "## Task 2 (2 pts)\n",
        "\n",
        "Assume $\\mu$ is not a generalised eigenvalue of $(A,B)$. How are spectra of $(A,B)$ and $((A-\\mu B)^{-1}A,(A-\\mu B)^{-1}B)$ related?\n",
        "\n",
        "## Task 3 (24 pts)\n",
        "\n",
        "To solve the complete generalised eigenvalue problem, [QZ algorithm](https://link.springer.com/content/pdf/10.1007/3-540-28502-4_2) can be used. This algorithm is the direct generalization of the QR algorithm for the standard eigenvalue problem.\n",
        "However, in this task we focus on the partial generalised eigenvalue problem and its application to the canonical correlation analysis.\n",
        "\n",
        "You can test the algorithms in the further tasks only for the symmetric matrices $A$ and symmetric positive definite matrices $B$.\n",
        "\n",
        "### From power method to its generalisation form\n",
        "\n",
        "In order to recover the largest generalised eigenvalue and the corresponding eigenvector, one can note that\n",
        "\n",
        "$$Av = \\lambda Bv$$\n",
        "\n",
        "is equivalent to\n",
        "\n",
        "$$B^{-1}Av = \\lambda v.$$\n",
        "\n",
        "Therefore, one has to use the power method to $B^{-1}A$ with a random initialisation.\n",
        "However, it may be rather expensive to invert $B$ explicitly.\n",
        "Therefore, we would like to avoid doing that and inexactly apply $B^{-1}$ through the solving linear system $Bx = y$.\n",
        "Implement the resulting algorithm based on this idea, verify its convergence speed and check that the generalised eigenvalue relation holds.\n",
        "\n",
        "Important notes that will help you successfully update the classical power method:\n",
        "\n",
        "1) think about how the normalization step should be changed, the energy norm definition $\\|x\\|^2_A = x^\\top A x$ can help in the proper reformultation\n",
        "\n",
        "2) think how the step $x_{k+1}= Ax_k$ will be updated with the aforementioned notes regarding operations with matrix $B$\n",
        "\n",
        "### From *block* power method to its generalisation form\n",
        "\n",
        "Just as in the regular eigenvalue case, generalised eigenvalues can be extended to block power method (which can yield the QZ algoritm, analogously to emergence of QR in the regular case).\n",
        "The extension is straightforward and consists of replacing vectors with matrices corresponding to the $k$ largest  generalised eigenvectors.\n",
        "Moreover, since orthogonality is reqiored, a routine for enforcing orthogonality of the iterates is also needed. Implement the block power method for the generalised eigenvalue problem.\n",
        "Pay special attention how the orthogonalisation procedure shown be changed to take into account the matrix $B$.\n",
        "Separately implement the proper orthoghonalisation algorithm and use it in your code for the target block power method.\n",
        "Test convergence speed and check that results satisfy the target equation.\n",
        "\n",
        "In addition, you can check the correctness of your result with ```scipy.linalg.eigh``` function with proper argumets.\n",
        "\n",
        "### Application of the generalised eignevalue problem to the canonical correlation analysis\n",
        "\n",
        "When one studies two datasets, it may be desirable to find the orthogonal (in the sense of the inner products induced by the correlation matrices) bases of spaces that capture linear combinations of features that are most correlated between the two datasets.\n",
        "Such a problem is called the problem of **canonical correlation analysis** and can be formulated as finding such a sequence $\\{(\\phi_i, \\psi_i)\\}$ that for data matrices $X\\in\\mathbb{R}^{n\\times a}, Y\\in\\mathbb{R}^{n\\times b}$\n",
        "\n",
        "$$(\\phi_i, \\psi_i)\\in \\arg\\max_{\\phi, \\psi} \\phi^TS_{xy}\\psi$$\n",
        "\n",
        "Subject to:\n",
        "\n",
        "$$\\|\\phi\\|_{S_x} = \\|\\psi\\|_{S_y} = 1$$\n",
        "\n",
        "$$\\langle\\phi, \\phi_j\\rangle_{S_x} = 0 \\quad \\forall j<i$$\n",
        "\n",
        "\n",
        "$$\\langle\\psi, \\psi_j\\rangle_{S_y} = 0 \\quad \\forall j<i,$$\n",
        "\n",
        "where $\\|\\cdot\\|_A$ is the energy norm induced by $A$, $\\langle\\cdot,\\cdot\\rangle_A$ is the inner product induced by $A$, $S_y = \\frac{1}{n}Y^\\top Y$, $S_x = \\frac{1}{n}X^\\top X$, $S_{xy} = \\frac{1}{n}X^\\top Y$\n",
        "\n",
        "We are asked to find two bases of the maximal-cross-correlation subspace, both orthogonal in the inner product induced by the correlation matrix of the appropriate dataset.\n",
        "\n",
        "Consider firstly the problem of simply finding a basis of the described space, subject only to unit-vector conditions (since orthogonalisation can always be carried out separately).\n",
        "The Lagrangian will then read:\n",
        "\n",
        "$$L(\\phi, \\psi, \\lambda, \\mu) = \\phi^TS_{xy}\\psi-\\lambda(\\phi^TS_x\\phi-1)-\\mu(\\psi^TS_y\\psi-1),$$\n",
        "\n",
        "where $\\lambda$ and $\\mu$ are dual variables.\n",
        "\n",
        "From the stationarity of Lagrangian with respect ot the original variables $\\psi$ and $\\phi$ follows the following equation on the dual varibles\n",
        "\n",
        "$$S_{xy}\\psi = \\lambda S_x\\phi$$\n",
        "\n",
        "$$S_{yx}\\phi = \\mu S_y\\psi$$\n",
        "\n",
        "Note that\n",
        "\n",
        "$$\\|\\phi\\|_{S_x} = \\phi^TS_x\\phi = \\frac{1}{\\lambda}\\phi^T S_{xy}\\psi = \\frac{1}{\\lambda} \\psi^TS_{yx}\\phi = \\frac{\\mu}{\\lambda}\\psi^TS_y\\psi = \\frac{\\mu}{\\lambda}\\|\\psi\\|_{S_y} = \\frac{\\mu}{\\lambda} = 1,$$\n",
        "\n",
        "Therefore $\\mu=\\lambda$ and the equations above can be simplified in the following way\n",
        "\n",
        "$$S_{xy}\\psi = \\lambda S_x\\phi$$\n",
        "\n",
        "$$S_{yx}\\phi = \\lambda S_y\\psi$$\n",
        "\n",
        "and the problem admits a block representation:\n",
        "\n",
        "$$\\begin{bmatrix}0 & S_{xy} \\\\ S_{yx} & 0\\end{bmatrix}\\begin{bmatrix}\\phi\\\\\\psi\\end{bmatrix} = \\lambda \\begin{bmatrix}S_x & 0 \\\\ 0 & S_y\\end{bmatrix}\\begin{bmatrix}\\phi\\\\\\psi\\end{bmatrix}. $$\n",
        "\n",
        "Surprisingly, this problem has the form of the generalised eigenvalue problem.\n",
        "Therefore, the target vectors can be found as the leading eigenvectors and will be an orthonormal basis.\n",
        "\n",
        "You need to implement the algorithm for extracting $k$ vectors $\\psi_i, \\phi_i$ from the given data matrices $X \\in \\mathbb{R}^{n \\times d_1}$ and $Y \\in \\mathbb{R}^{n \\times d_2}$.\n",
        "You should use the power method from the previous task and take into account the special structure of the matrices $(A, B)$ coming from the original problem statment. Please, use this structure for efficient implementation of the internal steps."
      ],
      "id": "9f71aa55"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3dS-exjVoF3C"
      },
      "source": [
        "##**3.1**##\n",
        "\n",
        "* Answer $-$ 2 eigenvalues\n",
        "\\\n",
        "$ (1-\\lambda)(3 - \\lambda) = 0$,\n",
        "$ \\lambda_1 = 3$,\n",
        "$ \\lambda_2 = 1$\n",
        "\n",
        "\n",
        "\n",
        "* Answer $-$ 1 eigenvalues\n",
        "\\\n",
        "Using the general equation $Av = \\lambda Bv$ let make substitution such that\n",
        "\n",
        "$$ \\begin{bmatrix} 1 & 2 \\\\ 0 & 3 \\end{bmatrix} \\begin{bmatrix} x_1  \\\\ x_2  \\end{bmatrix}  = \\begin{bmatrix} \\lambda x_1  \\\\ 0  \\end{bmatrix}, $$\n",
        "\n",
        "$$ x_1 = \\lambda x_1, \\lambda=1$$\n",
        "\n",
        "* Answer $-$ 0 eigenvalues\n",
        "\\\n",
        "Let make the same substitution\n",
        "$$ \\begin{bmatrix} 1 & 2 \\\\ 0 & 3 \\end{bmatrix} \\begin{bmatrix} x_1  \\\\ x_2  \\end{bmatrix}  = \\begin{bmatrix} \\lambda x_2  \\\\ 0  \\end{bmatrix}, $$\n",
        "\n",
        "* Answer $\\lambda∈R$\n",
        "$$ \\begin{bmatrix} 1 & 2 \\\\ 0 & 0 \\end{bmatrix} \\begin{bmatrix} x_1  \\\\ x_2  \\end{bmatrix}  = \\begin{bmatrix} \\lambda x_2  \\\\ 0  \\end{bmatrix}, $$\n",
        "\n",
        "$ x_1+2x_2 = \\lambda x_1$, then $\\lambda∈R$"
      ],
      "id": "3dS-exjVoF3C"
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**3.2**##\n",
        "\n",
        "For generalised eigenvalue we can write\n",
        "$$(A - \\mu B)^{-1}Av = \\lambda(A - \\mu B)^{-1}Bv,\\ Av = \\lambda Bv$$\n",
        "$$(A - \\mu B)^{-1}v(A-\\lambda B)=0$$\n",
        "\n",
        "As $\\mu$ is not a generalised eigenvalue then $(A - \\mu B)^{-1}$ can not be equal to zero, then it is clear that the expression does not depend on $(A - \\mu B)^{-1}$, but depends on $(A-\\lambda B)$. Thus, spectra of $(A,B)$ and $((A-\\mu B)^{-1}A,(A-\\mu B)^{-1}B)$ are related as they are equal.\n",
        "\n"
      ],
      "metadata": {
        "id": "eLeZwI4zt_bZ"
      },
      "id": "eLeZwI4zt_bZ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**3.3**##"
      ],
      "metadata": {
        "id": "nH-TDBn9t-H0"
      },
      "id": "nH-TDBn9t-H0"
    },
    {
      "cell_type": "code",
      "source": [
        "def generalized_power_method(A, B, max_iter=100, tol=1e-8):\n",
        "    n = A.shape[0]\n",
        "    x = random.rand(n)\n",
        "    error = []\n",
        "\n",
        "    for k in range(max_iter):\n",
        "        y = A @ x\n",
        "        x = linalg.solve(B, y)\n",
        "        x = x / sqrt(x.T @ B @ x)\n",
        "        lambda_ap = (x.T @ A @ x) / (x.T @ B @ x)\n",
        "        error.append(linalg.norm(A  - lambda_ap * B  ))\n",
        "        if k > 0 and error[k] < tol:\n",
        "            break\n",
        "\n",
        "    return lambda_ap,x"
      ],
      "metadata": {
        "id": "fHqnBw-axicL"
      },
      "id": "fHqnBw-axicL",
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A = array([[4, 4], [2, 1]])\n",
        "B = array([[3, 1], [1, 2]])\n",
        "generalized_power_method(A, B, max_iter=1000, tol=1e-8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w2TqRI-nxkT6",
        "outputId": "3351249f-bd6b-4ad8-9556-f4674da5cdff"
      },
      "id": "w2TqRI-nxkT6",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1.52469507659596, array([0.52915026, 0.1227232 ]))"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = A.shape[0]\n",
        "x = random.rand(n)\n",
        "\n",
        "error = []\n",
        "y = A @ x\n",
        "x = linalg.solve(B, y)\n",
        "x = x / sqrt(x.T @ B @ x)\n",
        "x.T @ B @ x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K4wJjvqex-Dr",
        "outputId": "e6876966-2467-4ad7-b650-c8d5dc0d0e12"
      },
      "id": "K4wJjvqex-Dr",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0000000000000002"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def mod_shmidt(v):\n",
        "  u = np.copy(v)\n",
        "  um_columns = u.shape[1]\n",
        "  for i in range(um_columns):\n",
        "    u[:,i+1:] -= u[:,i:i+1].T @ u[:,i+1:] / linalg.norm(u[:,i])**2 * u[:,i:i+1]\n",
        "    u[:,i] /= linalg.norm(u[:,i])\n",
        "  return u"
      ],
      "metadata": {
        "id": "BxMr3xsDyDAG"
      },
      "id": "BxMr3xsDyDAG",
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_psd_matrix(n):\n",
        "    A = random.randn(n, n)\n",
        "    return np.dot(A, A.T)\n",
        "\n",
        "n=3\n",
        "A = random.random(size=(n, n))\n",
        "B = generate_psd_matrix(n)\n",
        "B"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_p8e9fQDyfMb",
        "outputId": "136b49e9-e144-47dc-845f-d2e824b46e0f"
      },
      "id": "_p8e9fQDyfMb",
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 3.19109345, -1.65604224,  1.42094218],\n",
              "       [-1.65604224,  3.07488559,  0.81491777],\n",
              "       [ 1.42094218,  0.81491777,  1.82473142]])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = random.random(size=(n, n))\n",
        "\n",
        "def generalized_power_method_block(A, B, max_iter=100, tol=1e-8):\n",
        "    n = A.shape[0]\n",
        "    X = random.random(size=(n, n))\n",
        "    X = mod_shmidt(X)\n",
        "    error = []\n",
        "\n",
        "    for k in range(max_iter):\n",
        "        Y = A @ X\n",
        "        X = linalg.solve(B, Y)\n",
        "        X = mod_shmidt(X)\n",
        "        lambda_app =np.linalg.inv( (X.T @ A @ X))@(X.T @ B @ X)\n",
        "        error.append(np.linalg.norm(A  - lambda_app * B  ))\n",
        "        if k > 0 and error[k] < tol:\n",
        "            break\n",
        "\n",
        "    return lambda_app,X"
      ],
      "metadata": {
        "id": "udXDSRw5yfPV"
      },
      "id": "udXDSRw5yfPV",
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "d4f3edee",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3af48251-25d7-4fbf-84a0-c8c37bd0e86d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 5.98607693e+00+0.j,  4.35744756e-04+0.j, -2.84431975e-02+0.j]),\n",
              " array([[ 0.56594478,  0.22028393, -0.02833579],\n",
              "        [ 0.50670935, -0.01531499,  0.15284645],\n",
              "        [-0.65034771, -0.97531556, -0.98784363]]))"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "import scipy.linalg\n",
        "eigenvalues, _ = scipy.linalg.eig(A, B)\n",
        "eigenvalues, _"
      ],
      "id": "d4f3edee"
    },
    {
      "cell_type": "code",
      "source": [
        "generalized_power_method_block(A, B, max_iter=1000, tol=1e-10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g2oQ5MCuzWHI",
        "outputId": "7812b036-5725-4a73-c927-98363fafd8f3"
      },
      "id": "g2oQ5MCuzWHI",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[ 1.67054318e-01,  3.50020778e+01,  6.33713697e+03],\n",
              "        [-2.03726554e-13, -3.51577913e+01, -5.07685904e+03],\n",
              "        [ 9.39337810e-14,  3.15196116e-11,  2.29492148e+03]]),\n",
              " array([[ 0.56594478,  0.60066386,  0.56472067],\n",
              "        [ 0.50670935,  0.28690723, -0.81297594],\n",
              "        [-0.65034771,  0.74624873, -0.14198835]]))"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = random.random(size=(n, n))\n",
        "X = mod_shmidt(X)\n",
        "Y = A @ X\n",
        "Y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WnJfehA2zZ1L",
        "outputId": "cd38b315-2e5c-4951-ed77-bd8f9e510357"
      },
      "id": "WnJfehA2zZ1L",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.20409604,  0.37615281, -0.07432061],\n",
              "       [ 0.62363243,  0.53414181, -0.11492831],\n",
              "       [ 0.11834374,  0.30582446, -0.05865019]])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = A.shape[0]\n",
        "X = random.random(size=(n, n))\n",
        "X = mod_shmidt(X)\n",
        "\n",
        "error = []\n",
        "Y = A @ X\n",
        "X = linalg.solve(B, X)\n",
        "X = mod_shmidt(X)\n",
        "lambda_app =np.linalg.inv( (X.T @ A @ X))@(X.T @ B @ X)\n",
        "lambda_app"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QUwuvETJzb-w",
        "outputId": "050cd059-5dce-4ef6-c736-483ef99d3fe3"
      },
      "id": "QUwuvETJzb-w",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   77.38351025, -3284.68225753, -5334.44790689],\n",
              "       [   40.7888501 , -1735.30687842, -2793.75796753],\n",
              "       [  -56.52498027,  2404.29929324,  3917.85411235]])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "65d030ec"
      },
      "source": [
        "- You are further asked to test the developed algorithm on an arbitrary splitting of the MNIST dataset (import it from [keras](https://keras.io/api/datasets/mnist/), [PyTorch](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST), etc). Test different values of $k$.\n",
        "- In addition, test it on synthetic data of known covariance.\n",
        "You can generate bivariate data with known covariance matrix through the multiplication of vectors from standard normal distribution by the Cholesky factor of the desired covariance matrix.\n",
        "Then split the generated bivaritate data into two univariate vectors. Run the prepared code and comment on the obtained results."
      ],
      "id": "65d030ec"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e10241bb"
      },
      "outputs": [],
      "source": [
        "# Your code is here"
      ],
      "id": "e10241bb"
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}